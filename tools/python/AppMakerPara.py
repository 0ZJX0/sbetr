#!/usr/bin/env python2
#in app_namePara create two files
#CMakeLists.txt

def MakePara(sfarm_dir, app_name):
    print "create file "+sfarm_dir+'/'+app_name+'Para'+"/CMakeLists.txt"
    print ""
    print "set("+app_name.upper()+"1LAYER_SOURCES"
    print "  "+app_name+"BGCIndexType.F90"
    print "  "+app_name+"BGCType.F90"
    print ")"

    print "include_directories(${CMAKE_BINARY_DIR}/src/betr/betr_util)"
    print "include_directories(${CMAKE_BINARY_DIR}/src/betr/betr_math)"
    print "include_directories(${CMAKE_BINARY_DIR}/src/Applications/soil-farm/bgcfarm_util)"
    print "include_directories(${CMAKE_BINARY_DIR}/src/Applications/soil-farm/"+app_name+"/+"+app_name+"Para)"
    print "include(add_betr_library)"
    print "add_betr_library("+app_name+"1layer ${"+app_name.upper()+"1LAYER_SOURCES})"

    print "set(BETR_LIBRARIES "+app_name+"1layer;${BETR_LIBRARIES} PARENT_SCOPE)"
    print "set(BETR_LIBRARIES "+app_name+"1layer;${BETR_LIBRARIES})"

    print "if (NOT CMAKE_INSTALL_PREFIX STREQUAL "+'"'+"INSTALL_DISABLED"+'"'+")"
    print "    install(TARGETS "+app_name+"1layer DESTINATION lib)"
    print "    file(GLOB HEADERS *.h)"
    print "    install(FILES ${HEADERS} DESTINATION include/soil-farm/"+app_name+"/"+app_name+"1layer)"
    print "endif()"

    print ""
    print "create file "+sfarm_dir+'/'+app_name+'Para'+"/"+app_name+"ParaType.F90"
#app_nameParaType.F90

    print "module "+app_name+"ParaType"
    print "use bshr_kind_mod   , only : r8 => shr_kind_r8"
    print "use BiogeoContype   , only : BiogeoCon_type"
    print "implicit none"
    print ""
    print "  private"
    print "  character(len=*), private, parameter :: filename = &"
    print "       __FILE__"

    print "  type, public, extends(BiogeoCon_type) :: "+app_name+"_para_type"
    print "  !declare variables here"
    print ""
    print "  contains"
    print "    procedure, public  :: Init     => "+app_name+"_para_Init"
    print "    procedure, public  :: readPars => "+app_name+"_para_readPars"
    print "    procedure, public  :: printPars=> "+app_name+"_para_printPars"
    print "    procedure, private :: "+app_name+"_InitAllocate"
    print "    procedure, private :: set_defpar_default"
    print "  end type "+app_name+"_para_type"
    print ""
    print "  type("+app_name+"_para_type), public :: "+app_name+"_para"
    print "  public :: create_jarpars_"+app_name
    print "contains"
    print ""
    print "  function create_jarpars_"+app_name+"()"
    print "  ! DESCRIPTION"
    print "  ! constructor"
    print "  implicit none"
    print "  class("+app_name+"_para_type), pointer :: create_jarpars_"+app_name
    print "  class("+app_name+"_para_type), pointer :: bgc"
    print ""
    print "  allocate(bgc)"
    print "  create_jarpars_"+app_name+" => bgc"
    print ""
    print "  end function create_jarpars_"+app_name

    print " !--------------------------------------------------------------------"
    print "  subroutine "+app_name+"_para_Init(this, namelist_buffer, bstatus)"
    print "  !"
    print "  !DESCRIPTION"
    print "  !initialize default parameters"
    print ""
    print "  use betr_constants , only : betr_namelist_buffer_size_ext"
    print "  use BetrStatusType , only : betr_status_type"
    print "  use betr_ctrl      , only : betr_spinup_state"
    print "  implicit none"
    print "  class("+app_name+"_para_type), intent(inout) :: this"
    print "  character(len=*)             , intent(in)  :: namelist_buffer"
    print "  type(betr_status_type)       , intent(out) :: bstatus"
    print ""
    print "  call this%bcon_Init(bstatus)"
    print "  if(bstatus%check_status())return"
    print ""
    print "  call this%"+app_name+"_InitAllocate"+"()"
    print "  call this%set_defpar_default()"
    print ""
    print "  end subroutine "+app_name+"_para_Init"
    print " !--------------------------------------------------------------------"

    print "  subroutine "+app_name+"_InitAllocate"+"(this)"
    print "  use betr_varcon, only : betr_maxpatch_pft, betr_max_soilorder"
    print "  implicit none"
    print "  class("+app_name+"_para_type), intent(inout) :: this"
    print "  !allocate memory for necessary varaibles"
    print ""
    print "  end subroutine "+app_name+"_InitAllocate"

    print "  !--------------------------------------------------------------------"
    print "  subroutine set_defpar_default(this)"
    print "  !"
    print "  !DESCRIPTION"
    print "  !set default value for relevant parameters"
    print "  use tracer_varcon      , only : natomw,patomw"
    print "  use bshr_const_mod  , only : year_sec=>SHR_CONST_YEARSECS"
    print "  implicit none"
    print "  class("+app_name+"_para_type), intent(inout) :: this"
    print ""
    print ""
    print "  end subroutine set_defpar_default"

    print " !--------------------------------------------------------------------"

    print "  subroutine "+app_name+"_para_readPars(this, ncid, bstatus)"
    print "  !"
    print "  !DESCRIPTION"
    print "  read parameters from input file"
    print "  use bshr_log_mod    , only : errMsg => shr_log_errMsg"
    print "  use bncdio_pio       , only : file_desc_t, ncd_io"
    print "  use BetrStatusType  , only : betr_status_type"
    print "  use betr_ctrl       , only : betr_spinup_state"
    print "  use bshr_const_mod  , only : year_sec=>SHR_CONST_YEARSECS"
    print "  use tracer_varcon   , only : natomw,patomw"
    print "  implicit none"
    print "  class("+app_name+"_para_type), intent(inout) :: this"
    print "  type(file_desc_t)            , intent(inout) :: ncid  ! pio netCDF file id"
    print "  type(betr_status_type)       , intent(out)   :: bstatus"
    print ""
    print "  !local variables"
    print "  character(len=100) :: errCode = '-Error reading in parameters file:'"
    print "  logical            :: readv ! has variable been read in or not"
    print "  real(r8)           :: tempr(1) ! temporary to read in constant"
    print "  real(r8)           :: temparr(1:2,1:1)"
    print "  character(len=100) :: tString ! temp. var for reading"
    print ""
    print "  call bstatus%reset()"
    print "  return"
    print "  !read shared parameters"
    print "  call this%readPars_bgc(ncid, bstatus)"
    print ""
    print "  end subroutine "+app_name+"_para_readPars"

    print "!--------------------------------------------------------------------"
    print "  subroutine "+app_name+"_para_printPars(this)"
    print ""
    print "  implicit none"
    print "  class("+app_name+"_para_type), intent(inout) :: this"
    print "  call this%prtPars_bgc()"
    print "  end subroutine "+app_name+"_para_printPars"
    print "end module "+app_name+"ParaType"
